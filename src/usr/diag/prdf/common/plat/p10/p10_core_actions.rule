# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_core_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016,2022
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

actionclass self_level2_th_5perHour
{
    calloutSelfMed;
    callout2ndLvlMed;
    threshold5phour;
};

actionclass l3_cache_read_ce_dd20
{
    calloutSelfMed;
    threshold( field(128 / day), mfg_file(ATTR_MNFG_TH_L3_CACHE_CES) );
    funccall("L3CE");
};

actionclass l3_cache_read_ce
{
    try(funccall("ignoreDD10"), l3_cache_read_ce_dd20);
};

actionclass l3_cache_ue_UERE
{
    SueSource;
    self_th_1;
    funccall("L3UE");
};

actionclass l3_dir_read_ce_dd20
{
    calloutSelfMed;
    threshold( field(32 / day), mfg_file(ATTR_MNFG_TH_L3_DIR_CES) );
};

actionclass l3_dir_read_ce
{
    try(funccall("ignoreDD10"), l3_dir_read_ce_dd20);
};

actionclass l3_cache_write_ce
{
    try(funccall("ignoreDD10"), self_th_32perDay);
};

actionclass l2_cache_read_ce_dd20
{
    calloutSelfMed;
    threshold( field(128 / day), mfg_file(ATTR_MNFG_TH_L2_CACHE_CES) );
    funccall("L2CE");
};

actionclass l2_cache_read_ce
{
    try(funccall("ignoreDD10"), l2_cache_read_ce_dd20);
};

actionclass l2_cache_ue_UERE
{
    SueSource;
    self_th_1;
    funccall("L2UE");
};

actionclass l2_dir_read_ce_dd20
{
    calloutSelfMed;
    threshold( field(32 / day), mfg_file(ATTR_MNFG_TH_L2_DIR_CES) );
};

actionclass l2_dir_read_ce
{
    try(funccall("ignoreDD10"), l2_dir_read_ce_dd20);
};

actionclass ncuTimeout
{
    try(funccall("lpcWorkaround"), callout2ndLvlMed);
    threshold1;
};

actionclass hangRecoveryFailed
{
    try(funccall("lpcWorkaround"), calloutSelfMed);
    threshold1;
};

actionclass analyzeEQ_CORE_FIR
{
    funccall("CheckCoreCheckstop");
    capture(eq_core_fir_ffdc);
    analyze(gEQ_CORE_FIR);
};

actionclass analyzeEQ_L2_FIR
{
    capture(eq_l2_fir_ffdc);
    analyze(gEQ_L2_FIR);
};

actionclass analyzeEQ_NCU_FIR
{
    capture(eq_ncu_fir_ffdc);
    analyze(gEQ_NCU_FIR);
};

actionclass analyzeEQ_L3_FIR
{
    capture(eq_l3_fir_ffdc);
    analyze(gEQ_L3_FIR);
};

# EQ_CORE_FIR[56:57] indicate an attention (RE or UCS) was raised on the other
# core in the fused core pair. Some things to note:
#  - These attentions should be masked when NOT in fused core mode.
#  - These two bits should be the last bits in this FIR to be analyzed to ensure
#    all bits in this FIR are analyzed before moving on to the other core.
#  - If there truly is an attention in the other core, the plugins below will
#    switch analysis to the other core. As analysis wraps up, post analysis will
#    be called and the rule code will clear the active attention on that core.
#    Then the same will happen for this core.
actionclass analyzeNeighborCore_RE
{
    try(funccall("analyzeNeighborCore_RE"), level2_th_1);
};

actionclass analyzeNeighborCore_UCS
{
    try(funccall("analyzeNeighborCore_UCS"), level2_th_1);
};

actionclass master_power_bus_chip_procedure
{
    threshold1;
    funccall("calloutPbTokenManager");
};
