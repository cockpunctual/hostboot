# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p10/p10_omic_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2020,2023
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

################################################################################
#                                 OMIC Actions                                 #
################################################################################

actionclass dl0_omi
{
    capture(dl0_ffdc);
    funccall("CollectOmiOcmbFfdc_0");
    callout(connected(TYPE_OMI,0), MRU_MED);
};

actionclass dl1_omi
{
    capture(dl1_ffdc);
    funccall("CollectOmiOcmbFfdc_1");
    callout(connected(TYPE_OMI,1), MRU_MED);
};

actionclass dl0_omi_bus
{
    capture(dl0_ffdc);
    funccall("CollectOmiOcmbFfdc_0");
    funccall("calloutBusInterface_0");
};

actionclass dl1_omi_bus
{
    capture(dl1_ffdc);
    funccall("CollectOmiOcmbFfdc_1");
    funccall("calloutBusInterface_1");
};

/** OMI-DL0 Fatal Error */
actionclass dl0_fatal_error
{
    capture(dl0_ffdc);
    funccall("CollectOmiOcmbFfdc_0");
    try( funccall("DlFatalError_0"), dl0_omi_bus );
    threshold1;
};

/** OMI-DL1 Fatal Error */
actionclass dl1_fatal_error
{
    capture(dl1_ffdc);
    funccall("CollectOmiOcmbFfdc_1");
    try( funccall("DlFatalError_1"), dl1_omi_bus );
    threshold1;
};

actionclass dl0_fatal_error_UERE { SueSource; dl0_fatal_error; };
actionclass dl1_fatal_error_UERE { SueSource; dl1_fatal_error; };

actionclass dl0_omi_th_1
{
    dl0_omi;
    threshold1;
};

actionclass dl1_omi_th_1
{
    dl1_omi;
    threshold1;
};

actionclass dl0_omi_th_32perDay
{
    dl0_omi;
    threshold32pday;
};

actionclass threshold_and_mask_dl0_omi
{
    dl0_omi;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_dl0_omi_bus
{
    dl0_omi_bus;
    threshold_and_mask_th32;
};

actionclass dl1_omi_th_32perDay
{
    dl1_omi;
    threshold32pday;
};

actionclass dl0_omi_bus_th_1
{
    dl0_omi_bus;
    threshold1;
};

actionclass dl1_omi_bus_th_1
{
    dl1_omi_bus;
    threshold1;
};

actionclass dl0_omi_bus_th_32perDay
{
    dl0_omi_bus;
    threshold32pday;
};

actionclass dl1_omi_bus_th_32perDay
{
    dl1_omi_bus;
    threshold32pday;
};

actionclass threshold_and_mask_dl1_omi
{
    dl1_omi;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_dl1_omi_bus
{
    dl1_omi_bus;
    threshold_and_mask_th32;
};

# Bits using these actions are CRC-related errors that are potential
# side-effects of bits in the PAU_PHY_FIR. There is additional handling
# to determine the callout if a root cause bit is found on as well.
actionclass dl0_omi_degraded_mode
{
    funccall("CheckKvcoFix_0");
    try( funccall("CrcSideEffect_0"), dl0_omi_bus );
    funccall("omiDegradeRetrainWorkaround_0");
    threshold1;
    funccall("OmiDegradeDD1Workaround"); # Must be called after threshold
};

actionclass dl0_omi_bus_th_32perDay_CRC
{
    try( funccall("CrcSideEffect_0"), dl0_omi_bus );
    threshold32pday;
};

actionclass threshold_and_mask_dl0_omi_bus_CRC
{
    try( funccall("CrcSideEffect_0"), dl0_omi_bus );
    threshold32pday;
    try( funccall("IsNotDD1"), funccall("ClearServiceCallFlag") );
};

actionclass dl1_omi_degraded_mode
{
    funccall("CheckKvcoFix_1");
    try( funccall("CrcSideEffect_1"), dl1_omi_bus );
    funccall("omiDegradeRetrainWorkaround_1");
    threshold1;
    funccall("OmiDegradeDD1Workaround"); # Must be called after threshold
};

actionclass dl1_omi_bus_th_32perDay_CRC
{
    try( funccall("CrcSideEffect_1"), dl1_omi_bus );
    threshold32pday;
};

actionclass threshold_and_mask_dl1_omi_bus_CRC
{
    try( funccall("CrcSideEffect_1"), dl1_omi_bus );
    threshold32pday;
    try( funccall("IsNotDD1"), funccall("ClearServiceCallFlag") );
};
