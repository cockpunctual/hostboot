#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/hbDistribute $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2012,2023
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Enable strict error checking
set -exo pipefail

TARGET_DIR="invalid directory"
TARGET="fsp_TARGET"
TEST_TEST=0

print_usage()
{
    echo "Usage: $0 [--help] | "
    echo "          [<path>] [--test] [--release | --vpo | --fsp]"
    echo
    echo "    This script will deliver the defined content for a distribution"
    echo "    target.  This can be used to populate an ODE sandbox with"
    echo "    images and debug tools or for the generation of a build release"
    echo "    directory."
    echo "    However, if building for P10 Standalone, an ODE sandbox will not"
    echo "    be used. Instead, a 'standalone' directory will be created"
    echo "    under PROJECT_ROOT where the PNOR will be assembled, and the"
    echo "    Simics tools will be kept."
    echo
    echo "    If using ODE Sandbox, Target content is defined in"
    echo "    src/build/mkrules/dist.targets.mk"
    echo
    echo "  Options:"
    echo "    --help: Prints usage information"
    echo
    echo "    --test: Includes test images and content instead of non-test."
    echo
    echo "    --release: Create a full release distribution (all targets)."
    echo "    --vpo: Generate just 'vpo' content."
    echo "    --fsp: *default* Generate just 'fsp' content"
    echo "    --hb-standalone: Indicate if in hb-standalone mode for compile optimizing"
    echo "    --corrupt <Partition name>[= pro|unpro] (Note: requires '--secureboot')"
    echo "        Partition 'eyeCatch' name to corrupt a byte of."
    echo "        Optional '= pro|unpro' to indicate which section of the secure container to corrupt."
    echo "            Default (empty string '') is protected section."
    echo "            [Note: Some sections only have a protected section so not relevant for all.]"
    echo "        Multiple '--corrupt' options are allowed, but note the system will checkstop on the"
    echo "            first bad partition so multiple may not be that useful."
    echo "        Example: --corrupt HBI --corrupt HBD=unpro"
    echo "    --key-transition <imprint|production>   Indicates a key transition is needed and creates a secureboot key transition container."
    echo "        Note: \"--sign-mode production\" is not allowed with \"--key-transition imprint"
    echo "        With [--test] will transition to test dev keys, which are a fixed permutation of imprint keys."
}

# Parse arguments
while [[ $# -gt 0 ]]
do
    case $1 in
        "--help")
            print_usage
            exit -1
        ;;

        "--test")
            TARGET_TEST=1
            shift
        ;;

        "--vpo")
            TARGET="vpo_TARGET"
            shift
        ;;

        "--fsp")
            TARGET="fsp_TARGET"
            shift
        ;;

        "--openpower")
            TARGET="openpower_TARGET"
            shift
        ;;

        "--openpower-sim")
            TARGET="openpower-sim_TARGET"
            shift
        ;;

        "--errltool")
            TARGET="errltool_TARGET"
            shift
        ;;

        "--tools")
            TARGET="tools_TARGET"
            shift
        ;;

        "--release")
            TARGET="RELEASE"
            shift
        ;;

        "--debug")
            DEBUG="-d"
            shift
        ;;

        "--hb-standalone")
            HB_STANDALONE=1
            shift
        ;;

        "--src-check")
            SNIFFER_CHECK=1
            shift
        ;;

        "--corrupt")
            # Format is "--corrupt <partition[=pro|unpro]>"
            CORRUPT_PARAMS="$CORRUPT_PARAMS $1"
            shift
            CORRUPT_PARAMS="$CORRUPT_PARAMS $1"
            shift
        ;;

        "--key-transition")
            # Format is "--key-transition <imprint|production>"
            KEY_TRANSITION_PARAMS="$KEY_TRANSITION_PARAMS $1"
            shift
            KEY_TRANSITION_PARAMS="$KEY_TRANSITION_PARAMS $1"
            shift
        ;;

        --*)
            echo "ERROR: Unknown option: $1"
            exit -1
        ;;

        -j*)
            BUILD_PARAMS=$1
            shift
        ;;

        *)
            TARGET_DIR=$1
            shift
        ;;

    esac
done

# Export PNOR_LAYOUT_SELECTED variable
# Dynamically check if file exists indicating the fsprelease.config was used
# Note this file is generated in the hb config file rule in top level makefile
if [[ -f ${PROJECT_ROOT}/obj/genfiles/hb_fsp_release ]]; then
    echo "FSP build, using fsp pnor xml layout"
    export PNOR_LAYOUT_SELECTED=FSP
elif [[ -f ${PROJECT_ROOT}/obj/genfiles/hb_simics_p10_release ]]; then
    echo "P10 build, using P10 PNOR XML layout"
    export PNOR_LAYOUT_SELECTED=P10
elif [ ! -z "${VPO_COMPILE}" ]; then
    echo "VPO build, using VPO PNOR XML layout"
    export PNOR_LAYOUT_SELECTED=VPO
else
    echo "Non FSP build, using standalone (default) pnor xml layout"
    export PNOR_LAYOUT_SELECTED=STANDALONE
fi

if [[ $HB_STANDALONE != "1" ]] || [ $PNOR_LAYOUT_SELECTED == "FSP" ];then
# The following should not run if we are distributing for a ${HB_STANDALONE}
# system, i.e. when using an ODE SB

    echo "sbroot=${SANDBOXROOT} sbname=${SANDBOXNAME} sbbase=${SANDBOXBASE}"
    echo "target dir ${TARGET_DIR}"
    # Verify target directory or default to sandbox.
    if [ "${TARGET_DIR}" == "invalid directory" ]; then
        if [ -z "${SANDBOXBASE}" ]; then
           if [ -z "${SANDBOXROOT}" -o -z "${SANDBOXNAME}" ]; then
               echo "ERROR: TARGET_DIR - No path specified and \$SANDBOXBASE undefined."
               print_usage
               exit -1
           else
               TARGET_DIR=${SANDBOXROOT}/${SANDBOXNAME}/src/hbfw
           fi
        else
            TARGET_DIR=${SANDBOXBASE}/src/hbfw
        fi
    fi

fi

# Find root of repository.
if [ -e "src/build/tools/hbDistribute" ]; then
    REPO_ROOT="./"
else
    REPO_ROOT=`git rev-parse --show-toplevel`
    if [ -z $REPO_ROOT ]; then
        echo "ERROR: Not in a git repo."
        exit
    fi
fi

# if requested, pull in RcdlSniffer2Perl and run against all HB_BCxxRcdl files
if [[ $SNIFFER_CHECK -eq 1 || -n ${PARSE_RCDL_STRICT} ]]; then

    if [[ ! -d "${PROJECT_ROOT}/standalone/pubs-tools" ]];then
        mkdir -p ${PROJECT_ROOT}/standalone/pubs-tools
        git clone git@github.ibm.com:open-power/pubs-tools.git ${PROJECT_ROOT}/standalone/pubs-tools
    fi

    set +e

    # if genfiles dir does not exist and strict parsing is on, fail the prime
    if [[ ! -d "${PROJECT_ROOT}/obj/genfiles" && -n ${PARSE_RCDL_STRICT} ]]; then
        echo "PARSE_RCDL_STRICT is set but ${PROJECT_ROOT}/obj/genfiles does not exist"
        exit -1
    else
        echo "Running RcdlSniffer2Perl against all HB_BCxxRcdl_ files"
        for fname in $(ls ${PROJECT_ROOT}/obj/genfiles/HB_BCxxRcdl_*); do

             ${PROJECT_ROOT}/standalone/pubs-tools/RcdlSniffer2Perl PROFILE=${PROJECT_ROOT}/standalone/pubs-tools/snifferStandardProfile.h $fname 2> ${PROJECT_ROOT}/standalone/pubs-tools/sniffer.log > /dev/null
             rc=$?
             # if RcdlSniffer2Perl encounters an error
             if [[ "$rc" -ne 0 ]]; then
                 echo "RcdlSniffer2Perl failed with $rc on $fname error msg saved in ${PROJECT_ROOT}/standalone/pubs-tools/sniffer.log"
                 cat ${PROJECT_ROOT}/standalone/pubs-tools/sniffer.log
                 # and if PARSE_RCDL_STRICT is set to something other than the empty string
                 if [[ -n ${PARSE_RCDL_STRICT} ]]; then
                     # stop the prime
                     exit -1
                 else
                     # otherwise break the loop so duplicate errors from
                     # different RCDL files aren't displayed to the screen
                     # and continue prime
                     break
                 fi
             fi

        done
    fi
    set -e
fi

# Point to various signing related path components
export SIGNING_BASE_DIR=/esw/bin/sb-signing
#export SIGNING_BASE_DIR=/gsa/rchgsa/projects/s/sb_sign_tools
echo "Secure Boot: Signing base dir is ${SIGNING_BASE_DIR}"
export SIGNING_UTILS_DIR=sb-signing-utils
echo "Secure Boot: Signing utils dir is ${SIGNING_UTILS_DIR}"

# Point to the development signing keys
export DEV_KEY_DIR="${SIGNING_BASE_DIR}/sb-signing-keys"
echo "Secure Boot: Development keys dir is ${DEV_KEY_DIR}"

# Dynamically check config file if secureboot enabled build occurred
if [[ -f ${PROJECT_ROOT}/obj/genfiles/config.h ]]; then
    if cat ${PROJECT_ROOT}/obj/genfiles/config.h | grep -q "CONFIG_SECUREBOOT 1"; then
        echo "In secure mode"
    else
        export RM_HASH_PAGE_TABLE=1
        echo "In unsecure mode"
    fi
else
    echo "File DNE ${PROJECT_ROOT}/obj/genfiles/config.h"
    exit -1
fi

# Clean up preivous rand files. Should only be needed if a previous call failed.
# Done before dist.targets.mk because there are parallel operations that occur.
# So if we delete in genPnorImages.pl we would wipe out stuff currently being
# used elsewhere and cause a file not found error.
# Note: Prefix is set by genPnorImages.pl
rm -f ${SANDBOXROOT}/${SANDBOXNAME}/obj/ppc/hbfw/img/rand-*

# Execute makefile for distribution.
mkdir -p $TARGET_DIR
export TARGET_TEST
export TARGET_DIR
export HB_STANDALONE
export CORRUPT_PARAMS
if [ -n "$CORRUPT_PARAMS" ]; then
    echo "Corruption options = $CORRUPT_PARAMS"
fi
export KEY_TRANSITION_PARAMS
if [ -n "$KEY_TRANSITION_PARAMS" ]; then
    echo "Key transition options = $KEY_TRANSITION_PARAMS"
fi

if [[ $HB_STANDALONE -eq 1 ]] && [ $PNOR_LAYOUT_SELECTED != "FSP" ];then
# The following only runs when the environment is not using an ODE SB. Such is
# the case when using the "P10 standalone, non-FSP" configuration.

    # UNDERSCORE_TEST is set to _test when hbDistribute is called with --test
    # and set to an empty string otherwise.
    if [[ ${TARGET_TEST} ]]; then
        export UNDERSCORE_TEST="_test"
    fi

    # Setup for makefile and Simics
    source standaloneHelper --assembleSetup $BUILD_PARAMS
    source standaloneHelper --simicsSetup

    # Build the HCODE image for PNOR unless an override image was provided
    if [[ -z ${HCODE_OVERRIDE_IMAGE} ]]; then
        source standaloneHelper --generateHcodeImage
    else
        echo "Skipping build of HCODE due to user override"
    fi

    source standaloneHelper --generateSbeOdysseyImages

    cd ${PROJECT_ROOT}/standalone/pnor

    # Copy over hbbl.bin to standalone/pnor for SBE build consumption
    make -rR ${DEBUG:=} -f ${PROJECT_ROOT}/src/build/mkrules/assemble.standalone.mk gen_default_images

    cd ${PROJECT_ROOT}/standalone/pnor
    source standaloneHelper --generateSbeImage $BUILD_PARAMS

    cd ${PROJECT_ROOT}/standalone/pnor
    # Copy over sbe_seeprom_DD1.bin for PNOR build consumption
    make -rR ${DEBUG:=} -f ${PROJECT_ROOT}/src/build/mkrules/assemble.standalone.mk copy_sbe_bins

    # Run makefile (generates PNOR)
    cd ${PROJECT_ROOT}/standalone/pnor
    make -rR ${DEBUG:=} -f ${PROJECT_ROOT}/src/build/mkrules/assemble.standalone.mk

    exit 0

fi

cd $REPO_ROOT/src/build/mkrules
make -rR ${DEBUG:=} -f dist.targets.mk $TARGET
