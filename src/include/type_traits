/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/include/type_traits $                                     */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2015,2023                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */

#ifndef _TYPE_TRAITS_H__
#define _TYPE_TRAITS_H__

#include <util/impl/integral.H>
#include <util/impl/type_remove.H>
#include <util/impl/type_add.H>
#include <util/impl/is_same.H>
#include <util/impl/is_integral.H>
#include <util/impl/is_ptr.H>
#include <util/impl/enable_if.H>
#include <util/impl/is_array.H>

namespace std
{

    template<typename T>
        struct underlying_type
        {
            using type = __underlying_type(T);
        };

    template<bool B, class T, class F>
        struct conditional
        {
            using type = T;
        };

    template<class T, class F>
        struct conditional<false, T, F>
        {
            using type = F;
        };

    template<typename T>
        struct decay
        {
            private:
                typedef typename std::remove_reference<T>::type U;
            public:
                typedef typename std::conditional<std::is_array<U>::value,
                                                  typename std::add_pointer<typename std::remove_extent<U>::type>::type,
                                                  typename std::remove_cv<U>::type
                                                 >::type type;
        };

    template<class T>
        using decay_t = typename decay<T>::type;

    template<typename Ret, typename... Args>
        struct decay<Ret(Args...)>
        {
            using type = Ret(*)(Args...);
        };

}

#endif

/* vim: set filetype=cpp : */
